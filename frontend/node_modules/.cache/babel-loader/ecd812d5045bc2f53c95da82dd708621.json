{"ast":null,"code":"var _jsxFileName = \"/home/r/work/competence/react/todolist/src/App.js\";\nimport React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState(\"All\");\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      //if this task has the same ID as the edited one\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.map(task => /*#__PURE__*/React.createElement(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    key: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }));\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/React.createElement(FilterButton, {\n    key: name,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }));\n  const taskNoun = tasks.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${taskNoun} remaining`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"TodoMatic\"), /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), filterList, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, headingText), /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"list\",\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, taskList));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/r/work/competence/react/todolist/src/App.js"],"names":["React","useState","Todo","Form","FilterButton","nanoid","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","filter","setFilter","addTask","name","newTask","id","toggleTaskCompleted","updatedTasks","map","deleteTask","remainingTasks","editTask","newName","editedTaskList","taskList","filterList","taskNoun","length","headingText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed,\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState(\"All\");\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      //if this task has the same ID as the edited one\n      if (id === task.id) {\n        return { ...task, name: newName };\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.map((task) => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton key={name} name={name} />\n  ));\n  const taskNoun = tasks.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${taskNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      {filterList}\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}