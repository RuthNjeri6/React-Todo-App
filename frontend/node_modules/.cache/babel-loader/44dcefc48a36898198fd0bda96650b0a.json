{"ast":null,"code":"var _jsxFileName = \"/home/r/work/competence/react/todolist/src/components/Todo.js\";\nimport React, { useState, useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nexport default function Todo(props) {\n  const type = \"List\";\n  const ref = useRef(null); //initalize the reference\n  // add a droppable element using useDrop\n\n  const [, drop] = useDrop({\n    accept: type,\n\n    hover(item) {\n      if (!ref.current) {\n        return;\n      }\n\n      const dragItem = item.index;\n      const hoverItem = props.index;\n\n      if (dragItem === hoverItem) {\n        return;\n      }\n\n      props.moveTask(dragItem, hoverItem);\n      item.index = hoverItem;\n    }\n\n  }); //add a draggle item  using useDrag hook\n\n  const [, drag] = useDrag({\n    item: {\n      type,\n      id: props.id,\n      index: props.index\n    }\n  });\n  drag(drop(ref));\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState(\"\");\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const editingTemplate = /*#__PURE__*/React.createElement(\"form\", {\n    className: \"stack-small\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"todo-label\",\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"New name for \", props.name), /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    className: \"todo-text\",\n    type: \"text\",\n    value: newName,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn todo-cancel\",\n    onClick: () => setEditing(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Cancel\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"renaming \", props.name)), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn__primary todo-edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Save\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"new name for \", props.name))));\n  const viewTemplate = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stack-small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"c-cb\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: \"checkbox\",\n    defaultChecked: props.completed,\n    onChange: () => props.toggleTaskCompleted(props.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"todo-label\",\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, props.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn\",\n    onClick: () => setEditing(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Edit \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 16\n    }\n  }, props.name)), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn__danger\",\n    onClick: () => props.deleteTask(props.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Delete \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 18\n    }\n  }, props.name))));\n  return /*#__PURE__*/React.createElement(\"li\", {\n    ref: ref,\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, isEditing ? editingTemplate : viewTemplate);\n}","map":{"version":3,"sources":["/home/r/work/competence/react/todolist/src/components/Todo.js"],"names":["React","useState","useRef","useDrag","useDrop","Todo","props","type","ref","drop","accept","hover","item","current","dragItem","index","hoverItem","moveTask","drag","id","isEditing","setEditing","newName","setNewName","handleChange","e","target","value","handleSubmit","preventDefault","editTask","editingTemplate","name","viewTemplate","completed","toggleTaskCompleted","deleteTask"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nimport { useDrag, useDrop } from \"react-dnd\";\n\nexport default function Todo(props) {\n  const type = \"List\";\n\n  const ref = useRef(null); //initalize the reference\n\n  // add a droppable element using useDrop\n  const [, drop] = useDrop({\n    accept: type,\n    hover(item) {\n      if (!ref.current) {\n        return;\n      }\n      const dragItem = item.index;\n      const hoverItem = props.index;\n      if (dragItem === hoverItem) {\n        return;\n      }\n      props.moveTask(dragItem, hoverItem);\n      item.index = hoverItem;\n    },\n  });\n\n  //add a draggle item  using useDrag hook\n  const [, drag] = useDrag({\n    item: { type, id: props.id, index: props.index },\n  });\n\n  drag(drop(ref));\n\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState(\"\");\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const editingTemplate = (\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.name}\n        </label>\n        <input\n          id={props.id}\n          className=\"todo-text\"\n          type=\"text\"\n          value={newName}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"btn-group\">\n        <button\n          type=\"button\"\n          className=\"btn todo-cancel\"\n          onClick={() => setEditing(false)}\n        >\n          Cancel\n          <span className=\"visually-hidden\">renaming {props.name}</span>\n        </button>\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">new name for {props.name}</span>\n        </button>\n      </div>\n    </form>\n  );\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n        <input\n          id={props.id}\n          type=\"checkbox\"\n          defaultChecked={props.completed}\n          onChange={() => props.toggleTaskCompleted(props.id)}\n        />\n        <label className=\"todo-label\" htmlFor={props.id}>\n          {props.name}\n        </label>\n      </div>\n      <div className=\"btn-group\">\n        <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\n          Edit <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn__danger\"\n          onClick={() => props.deleteTask(props.id)}\n        >\n          Delete <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <li ref={ref} className=\"todo\">\n      {isEditing ? editingTemplate : viewTemplate}\n    </li>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}