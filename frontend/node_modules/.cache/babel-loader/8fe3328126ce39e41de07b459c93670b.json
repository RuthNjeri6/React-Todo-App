{"ast":null,"code":"var _jsxFileName = \"/home/r/work/competence/react/todo-app/todolist/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport update from \"immutability-helper\";\nimport axios from \"axios\";\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState([]);\n  const [item, setNewTask] = useState({\n    name: \"\",\n    completed: false\n  });\n  const [filter, setFilter] = useState(\"All\");\n  useEffect(() => {\n    refreshList();\n  });\n\n  const refreshList = () => {\n    axios.get(\"http://localhost:8000/api/todos/\").then(res => setTasks(res.data)).catch(err => console.log(err));\n  };\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setNewTask(newTask);\n\n    if (name.id) {\n      axios.put(`http://localhost:8000/api/todos/${name.id}/`, name).then(res => this.refreshList());\n      return;\n    }\n\n    axios.post(\"http://localhost:8000/api/todos/\", name).then(res => this.refreshList());\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      //if this task has the same ID as the edited one\n      if (id === task.id) {\n        if (newName.length !== 0) {\n          return { ...task,\n            name: newName\n          };\n        } else {\n          alert(\"input field must not be empty!\");\n        }\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const moveTask = (dragIndex, hoverIndex) => {\n    //get the dragged element\n    const draggedTask = tasks[dragIndex];\n    setTasks(update(tasks, {\n      $splice: [[dragIndex, 1], [hoverIndex, 0, draggedTask]]\n    }));\n  };\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map((task, index) => /*#__PURE__*/React.createElement(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    key: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask,\n    index: index,\n    moveTask: moveTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }));\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/React.createElement(FilterButton, {\n    key: name,\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }));\n  const taskNoun = tasks.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${taskNoun} remaining`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"TodoMatic\"), /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    item: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters btn-group stack-exception\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, \" \", filterList), /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, headingText), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DndProvider, {\n    backend: HTML5Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, taskList)));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/r/work/competence/react/todo-app/todolist/src/App.js"],"names":["React","useState","useEffect","Todo","Form","FilterButton","nanoid","DndProvider","HTML5Backend","update","axios","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","item","setNewTask","name","filter","setFilter","refreshList","get","then","res","data","catch","err","console","log","addTask","newTask","id","put","post","toggleTaskCompleted","updatedTasks","map","deleteTask","remainingTasks","editTask","newName","editedTaskList","length","alert","moveTask","dragIndex","hoverIndex","draggedTask","$splice","taskList","index","filterList","taskNoun","headingText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport update from \"immutability-helper\";\nimport axios from \"axios\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed,\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState([]);\n  const [item, setNewTask] = useState({\n    name: \"\",\n    completed: false,\n  });\n  const [filter, setFilter] = useState(\"All\");\n\n  useEffect(() => {\n    refreshList();\n  });\n\n  const refreshList = () => {\n    axios\n      .get(\"http://localhost:8000/api/todos/\")\n      .then((res) => setTasks(res.data))\n      .catch((err) => console.log(err));\n  };\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setNewTask(newTask);\n\n    if (name.id) {\n      axios\n        .put(`http://localhost:8000/api/todos/${name.id}/`, name)\n        .then((res) => this.refreshList());\n\n      return;\n    }\n    axios\n      .post(\"http://localhost:8000/api/todos/\", name)\n      .then((res) => this.refreshList());\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      //if this task has the same ID as the edited one\n      if (id === task.id) {\n        if (newName.length !== 0) {\n          return { ...task, name: newName };\n        } else {\n          alert(\"input field must not be empty!\");\n        }\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  const moveTask = (dragIndex, hoverIndex) => {\n    //get the dragged element\n    const draggedTask = tasks[dragIndex];\n\n    setTasks(\n      update(tasks, {\n        $splice: [\n          [dragIndex, 1],\n          [hoverIndex, 0, draggedTask],\n        ],\n      })\n    );\n  };\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map((task, index) => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n        index={index}\n        moveTask={moveTask}\n      />\n    ));\n\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n  const taskNoun = tasks.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${taskNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} item={item} />\n      <div className=\"filters btn-group stack-exception\"> {filterList}</div>\n\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        <DndProvider backend={HTML5Backend}>{taskList}</DndProvider>\n      </ul>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}