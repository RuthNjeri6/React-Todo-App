{"ast":null,"code":"var _jsxFileName = \"/home/r/work/competence/react/todolist/src/App.js\";\nimport React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\nimport update from \"immutability-helper\";\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState(\"All\");\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      //if this task has the same ID as the edited one\n      if (id === task.id) {\n        if (newName.length !== 0) {\n          return { ...task,\n            name: newName\n          };\n        } else {\n          alert(\"input field must not be empty!\");\n        }\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  } // const taskList = tasks\n  //   .filter(FILTER_MAP[filter])\n  //   .map((task) => (\n  //     <Todo\n  //       id={task.id}\n  //       name={task.name}\n  //       completed={task.completed}\n  //       key={task.id}\n  //       toggleTaskCompleted={toggleTaskCompleted}\n  //       deleteTask={deleteTask}\n  //       editTask={editTask}\n  //       moveTask={moveTask}\n  //     />\n  //   ));\n  //task component\n\n\n  const TaskList = ({\n    tasks,\n    moveTask\n  }) => {\n    //render each task by colling the todo component\n    const renderTask = (task, index) => {\n      return /*#__PURE__*/React.createElement(Todo, {\n        task: task,\n        index: index,\n        key: `${task.id}-task`,\n        moveTask: moveTask,\n        id: task.id,\n        name: task.name,\n        completed: task.completed // key={task.id}\n        ,\n        toggleTaskCompleted: toggleTaskCompleted,\n        deleteTask: deleteTask,\n        editTask: editTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      });\n    }; //return the list of tasks\n\n\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"file-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 12\n      }\n    }, tasks.map(renderTask));\n  };\n\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/React.createElement(FilterButton, {\n    key: name,\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }));\n  const taskNoun = tasks.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${tasks.length} ${taskNoun} remaining`;\n\n  const moveTask = (dragIndex, hoverIndex) => {\n    // get the dragged element\n    const draggedTask = tasks[dragIndex]; //   - copy the dragged image before hovered element (i.e., [hoverIndex, 0, draggedImage])\n    //   - remove the previous reference of dragged element (i.e., [dragIndex, 1])\n    //   - here we are using this update helper method from immutability-helper package\n\n    setTasks(update(tasks, {\n      $splice: [[dragIndex, 1], [hoverIndex, 0, draggedTask]]\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"TodoMatic\"), /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), filterList, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, headingText), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DndProvider, {\n    backend: HTML5Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TaskList, {\n    tasks: tasks,\n    moveTask: moveTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/r/work/competence/react/todolist/src/App.js"],"names":["React","useState","Todo","Form","FilterButton","nanoid","HTML5Backend","DndProvider","update","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","filter","setFilter","addTask","name","newTask","id","toggleTaskCompleted","updatedTasks","map","deleteTask","remainingTasks","editTask","newName","editedTaskList","length","alert","TaskList","moveTask","renderTask","index","filterList","taskNoun","headingText","dragIndex","hoverIndex","draggedTask","$splice"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\nimport update from \"immutability-helper\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed,\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState(\"All\");\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      //if this task has the same ID as the edited one\n      if (id === task.id) {\n        if (newName.length !== 0) {\n          return { ...task, name: newName };\n        } else {\n          alert(\"input field must not be empty!\");\n        }\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  // const taskList = tasks\n  //   .filter(FILTER_MAP[filter])\n  //   .map((task) => (\n  //     <Todo\n  //       id={task.id}\n  //       name={task.name}\n  //       completed={task.completed}\n  //       key={task.id}\n  //       toggleTaskCompleted={toggleTaskCompleted}\n  //       deleteTask={deleteTask}\n  //       editTask={editTask}\n  //       moveTask={moveTask}\n  //     />\n  //   ));\n\n  //task component\n  const TaskList = ({ tasks, moveTask }) => {\n    //render each task by colling the todo component\n    const renderTask = (task, index) => {\n      return (\n        <Todo\n          task={task}\n          index={index}\n          key={`${task.id}-task`}\n          moveTask={moveTask}\n          id={task.id}\n          name={task.name}\n          completed={task.completed}\n          // key={task.id}\n          toggleTaskCompleted={toggleTaskCompleted}\n          deleteTask={deleteTask}\n          editTask={editTask}\n        />\n      );\n    };\n    //return the list of tasks\n    return <section className=\"file-list\">{tasks.map(renderTask)}</section>;\n  };\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n  const taskNoun = tasks.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${tasks.length} ${taskNoun} remaining`;\n\n  const moveTask = (dragIndex, hoverIndex) => {\n    // get the dragged element\n    const draggedTask = tasks[dragIndex];\n\n    //   - copy the dragged image before hovered element (i.e., [hoverIndex, 0, draggedImage])\n    //   - remove the previous reference of dragged element (i.e., [dragIndex, 1])\n    //   - here we are using this update helper method from immutability-helper package\n\n    setTasks(\n      update(tasks, {\n        $splice: [\n          [dragIndex, 1],\n          [hoverIndex, 0, draggedTask],\n        ],\n      })\n    );\n  };\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      {filterList}\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        <DndProvider backend={HTML5Backend}>\n          <TaskList tasks={tasks} moveTask={moveTask} />\n        </DndProvider>\n      </ul>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}